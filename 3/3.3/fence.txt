/*
ID: jujumoh1
LANG: C
TASK: fence
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_FENCES 1024
#define MAX_VERTICES 500

static int adj_list[MAX_VERTICES][MAX_VERTICES - 1];
static int num_edges[MAX_VERTICES] = {0};
static int circuit[MAX_FENCES];
int num_circuit = 0;

int compare(const void *a, const void *b) {
  return *((int*)b) - *((int*)a);
}

void find_circuit(int node_index) {
  int cur_index, is_found, i;
  qsort(adj_list[node_index], num_edges[node_index], 
        sizeof(int), compare);
  while (num_edges[node_index] > 0) {
    cur_index = adj_list[node_index][num_edges[node_index] - 1];
    num_edges[node_index]--;
    is_found = 0;
    for (i = 0; i < num_edges[cur_index]; i++) {
      if (is_found == 1)
        adj_list[cur_index][i - 1] = adj_list[cur_index][i];
      else if (adj_list[cur_index][i] == node_index)
        is_found = 1;
    }
    num_edges[cur_index]--;
    find_circuit(cur_index);
  }
  circuit[num_circuit++] = node_index + 1;
}

int main(void) {
  FILE *fin = fopen("fence.in", "r");
  FILE *fout = fopen("fence.out", "w");
  int f;
  fscanf(fin, "%d", &f);
  int i, from, to;
  for (i = 0; i < f; i++) {
    fscanf(fin, "%d%d", &from, &to);
    adj_list[from - 1][num_edges[from - 1]++] = to - 1;
    adj_list[to - 1][num_edges[to - 1]++] = from - 1;
  }
  int start_index = 0;
  for (i = 0; i < MAX_VERTICES; i++)
    if (num_edges[i] % 2 == 1) {
      start_index = i;
      break;
    }
  find_circuit(start_index);
  for (i = num_circuit - 1; i >= 0; i--)
    fprintf(fout, "%d\n", circuit[i]);
  return 0;
}