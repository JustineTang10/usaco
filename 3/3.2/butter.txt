/*
ID: jujumoh1
LANG: C
TASK: butter
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_PASTURES 800

typedef struct edge {
  int to_index, distance;
  struct edge* next;
} edge;

typedef struct heap_elem {
  int index;
  int distance;
} heap_elem;

static int by_index[MAX_PASTURES];

/*void heap_insert(heap_elem heap[], int *num_heap, 
                  int index, int distance) {
  int i;
  heap_elem temp;
  if (by_index[index].index == -1) {
    (*num_heap)++;
    heap[*num_heap] = (heap_elem){index, *num_heap, distance};
    by_index[index] = heap[*num_heap];
    i = *num_heap;
  }
  else {
    by_index[index].distance = distance;
    heap[by_index[index].heap_index].distance = distance;
    i = by_index[index].heap_index;
  }
  while (i > 1 && heap[i].distance < heap[i / 2].distance) {
    temp = heap[i];
    heap[i] = heap[i / 2];
    heap[i / 2] = temp;
    heap[i].heap_index = i;
    heap[i / 2].heap_index = (int) (i / 2);
    i = i / 2;
  }
}

heap_elem heap_extract(heap_elem heap[], int *num_heap) {
  if ((*num_heap) == 0)
    return (heap_elem){-1, -1, -1};
  heap_elem remove, temp;
  int i, child;
  remove = heap[1];
  heap[1] = heap[*num_heap];
  by_index[remove.index] = (heap_elem){-1, -1, -1};
  (*num_heap)--;
  i = 1;
  while (i * 2 <= *num_heap) {
    child = i * 2;
    if (child < *num_heap && heap[child + 1].distance < 
        heap[child].distance)
      child++;
    if (heap[child].distance < heap[i].distance) {
      heap[i].heap_index = i;
      heap[child].heap_index = child;
      temp = heap[i];
      heap[i] = heap[child];
      heap[child] = temp;
      i = child;
    } else
      break;
  }
  return remove;
}*/

void heap_insert(heap_elem heap[], int *num_heap,
int index, int distance) {
  int i;
  heap_elem temp;
  if (by_index[index] == -1) {
    (*num_heap)++;
    heap[*num_heap] = (heap_elem){index, distance};
    i = *num_heap;
    by_index[index] = i;
  }
  else {
    heap[by_index[index]].distance = distance;
    i = by_index[index];
  }
  while (i > 1 && heap[i].distance < heap[i / 2].distance) {
    temp = heap[i];
    heap[i] = heap[i / 2];
    heap[i / 2] = temp;
    by_index[heap[i].index] = i;
    by_index[heap[i / 2].index] = i / 2;
    i = i / 2;
  }
}

heap_elem heap_extract(heap_elem heap[], int *num_heap) {
  if ((*num_heap) == 0)
    return (heap_elem){-1, -1};
  heap_elem remove, temp;
  int i, child;
  remove = heap[1];
  by_index[remove.index] = -1;
  heap[1] = heap[*num_heap];
  (*num_heap)--;
  i = 1;
  while (i * 2 <= *num_heap) {
    child = i * 2;
    if (child < *num_heap && 
        heap[child + 1].distance < heap[child].distance)
      child++;
    if (heap[child].distance < heap[i].distance) {
      temp = heap[i];
      heap[i] = heap[child];
      heap[child] = temp;
      by_index[heap[i].index] = i;
      by_index[heap[child].index] = child;
      i = child;
    } else
      break;
  }
  return remove;
}

edge* new_edge(int to, int distance) {
  edge* e = malloc(sizeof(edge));
  if (e == NULL) {
    fprintf(stderr, "malloc error\n");
    exit(1);
  }
  e->to_index = to;
  e->distance = distance;
  return e;
}

int main(void) { // 868
  FILE *fin = fopen("butter.in", "r");
  FILE *fout = fopen("butter.out", "w");
  static int distances[MAX_PASTURES][2];
  int n, p, c;
  fscanf(fin, "%d%d%d", &n, &p, &c);
  edge* adj_list[p];
  int num_cows[p];
  heap_elem heap[p + 1];
  int i, j, cur_pasture, to_pasture, distance;
  edge* cur_edge;
  for (i = 0; i < p; i++) {
    adj_list[i] = NULL;
    num_cows[i] = 0;
  }
  for (i = 0; i < n; i++) {
    fscanf(fin, "%d", &cur_pasture);
    num_cows[cur_pasture - 1]++;
  }
  for (i = 0; i < c; i++) {
    fscanf(fin, "%d%d%d", &cur_pasture, &to_pasture, &distance);
    cur_edge = new_edge(to_pasture - 1, distance);
    cur_edge->next = adj_list[cur_pasture - 1];
    adj_list[cur_pasture - 1] = cur_edge;
    cur_edge = new_edge(cur_pasture - 1, distance);
    cur_edge->next = adj_list[to_pasture - 1];
    adj_list[to_pasture - 1] = cur_edge;
  }
  int min_distance = -1, cur_distance, cur_parent, num_heap, cur_min;
  heap_elem cur_heap;
  for (i = 0; i < p; i++) {
    for (j = 0; j < p; j++) {
      distances[j][0] = -1;
      distances[j][1] = 0;
      by_index[j] = -1;
    }
    num_heap = 0;
    cur_distance = 0;
    cur_parent = i;
    distances[i][0] = 0;
    cur_min = -1;
    for (;;) {
      distances[cur_parent][1] = 1;
      cur_distance += distances[cur_parent][0] * num_cows[cur_parent];
      cur_edge = adj_list[cur_parent];
      while (cur_edge != NULL) {
        if (distances[cur_edge->to_index][1] == 0 && 
          (distances[cur_edge->to_index][0] == -1 || 
          distances[cur_parent][0] + cur_edge->distance < 
          distances[cur_edge->to_index][0])) {
          distances[cur_edge->to_index][0] = distances[cur_parent][0] 
                                          + cur_edge->distance;
          heap_insert(heap, &num_heap, cur_edge->to_index, 
                                    distances[cur_edge->to_index][0]);
        }
        cur_edge = cur_edge->next;
      }
      cur_parent = heap_extract(heap, &num_heap).index;
      /*cur_min = -1;
      for (j = 0; j < p; j++)
        if (distances[j][1] == 0 && distances[j][0] != -1 && 
            (cur_min == -1 || distances[j][0] < cur_min)) {
          cur_min = distances[j][0];
          cur_parent = j;
        }
      if (cur_min == -1)
        break;*/
      //printf("%d\n", num_heap);
      if (cur_parent < 0)
        break;
    }
    if (min_distance == -1 || cur_distance < min_distance)
      min_distance = cur_distance;
  }
  fprintf(fout, "%d\n", min_distance);
  return 0;
}