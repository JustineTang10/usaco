/*
ID: jujumoh1
LANG: C
TASK: ratios
*/

#include <stdio.h>
#include <stdlib.h>

int compare(int cur_ratio[3], int goal[3]) {
  int i, found_ratio = -1;
  for (i = 0; i < 3; i++) {
    if (goal[i] != 0 && 
        (cur_ratio[i] % goal[i] == 0 && (found_ratio == -1 || 
        cur_ratio[i] / goal[i] == found_ratio)))
      found_ratio = cur_ratio[i] / goal[i];
    else if (!(goal[i] == 0 && cur_ratio[i] == 0))
      return -1;
  }
  if (cur_ratio[0] == 0 && cur_ratio[1] == 0 && cur_ratio[2] == 0)
    return -1;
  return found_ratio;
}

int main(void) {
  FILE *fin = fopen("ratios.in", "r");
  FILE *fout = fopen("ratios.out", "w");
  int goal[3];
  int ratios[3][3];
  int i, j, k;
  for (i = 0; i < 3; i++)
    fscanf(fin, "%d", &goal[i]);
  for (i = 0; i < 3; i++)
    for (j = 0; j < 3; j++)
      fscanf(fin, "%d", &ratios[i][j]);
  int min_sum = 300, cur_amount;
  int min_numbers[4];
  for (i = 0; i < 4; i++)
    min_numbers[i] = -1;
  int cur_ratio[3] = {0};
  for (i = 0; i < 100; i++) {
    cur_ratio[0] += ratios[0][0] * i;
    cur_ratio[1] += ratios[0][1] * i;
    cur_ratio[2] += ratios[0][2] * i;
    for (j = 0; j < 100; j++) {
      cur_ratio[0] += ratios[1][0] * j;
      cur_ratio[1] += ratios[1][1] * j;
      cur_ratio[2] += ratios[1][2] * j;
      for (k = 0; k < 100; k++) {
        cur_ratio[0] += ratios[2][0] * k;
        cur_ratio[1] += ratios[2][1] * k;
        cur_ratio[2] += ratios[2][2] * k;
        cur_amount = compare(cur_ratio, goal);
        if (cur_amount != -1) {
          if (i + j + k < min_sum) {
            min_sum = i + j + k;
            min_numbers[0] = i;
            min_numbers[1] = j;
            min_numbers[2] = k;
            min_numbers[3] = cur_amount;
          }
        }
        cur_ratio[0] -= ratios[2][0] * k;
        cur_ratio[1] -= ratios[2][1] * k;
        cur_ratio[2] -= ratios[2][2] * k;
      }
      cur_ratio[0] -= ratios[1][0] * j;
      cur_ratio[1] -= ratios[1][1] * j;
      cur_ratio[2] -= ratios[1][2] * j;
    }
    cur_ratio[0] -= ratios[0][0] * i;
    cur_ratio[1] -= ratios[0][1] * i;
    cur_ratio[2] -= ratios[0][2] * i;
  }
  if (min_numbers[3] == -1)
    fprintf(fout, "NONE\n");
  else
    fprintf(fout, "%d %d %d %d\n", min_numbers[0], min_numbers[1], 
                                  min_numbers[2], min_numbers[3]);
  return 0;
}