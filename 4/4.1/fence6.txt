/*
ID: jujumoh1
LANG: C
TASK: fence6
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_FENCES 100

typedef struct fence {
  int index;
  int length;
  int active;
  int to;
  struct fence* next;
} fence;

typedef struct vertex {
  fence* list;
  int points[9];
  int num_points;
} vertex;

int compare(const void *a, const void *b) {
  return (*((int*)a) - *((int*)b));
}

int main(void) {
  FILE *fin = fopen("fence6.in", "r");
  FILE *fout = fopen("fence6.out", "w");
  static vertex adj_list[MAX_FENCES];
  static int distances[MAX_FENCES][2];
  static fence* fences[MAX_FENCES + 1][2] = {NULL};
  int num_vertices = 0, cur_vertices[9];
  int n, i, j, k, cur_index, n1, n2;
  fence* cur_fence;
  fscanf(fin, "%d", &n);
  for (i = 0; i < n; i++) {
    fscanf(fin, "%d", &cur_index);
    fences[cur_index][0] = malloc(sizeof(fence));
    fences[cur_index][1] = malloc(sizeof(fence));
    if (fences[cur_index][0] == NULL || 
        fences[cur_index][1] == NULL) {
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    fences[cur_index][0]->active = 1;
    fences[cur_index][1]->active = 1;
    fences[cur_index][0]->index = cur_index;
    fences[cur_index][1]->index = cur_index;
    fscanf(fin, "%d", &fences[cur_index][0]->length);
    fences[cur_index][1]->length = fences[cur_index][0]->length;
    fscanf(fin, "%d%d", &n1, &n2);
    for (j = 0; j < n1; j++)
      fscanf(fin, "%d", &cur_vertices[j]);
    cur_vertices[n1] = cur_index;
    qsort(cur_vertices, n1 + 1, sizeof(int), compare);
    for (j = 0; j < num_vertices; j++) {
      for (k = 0; k < n1 + 1 && k < adj_list[j].num_points; k++)
        if (cur_vertices[k] != adj_list[j].points[k])
          break;
      if (n1 + 1 == adj_list[j].num_points && k == n1 + 1)
        break;
    }
    if (j == num_vertices) {
      fences[cur_index][1]->to = num_vertices;
      num_vertices++;
      adj_list[fences[cur_index][1]->to].list = NULL;
      for (j = 0; j <= n1; j++)
        adj_list[fences[cur_index][1]->to].points[j] = 
          cur_vertices[j];
      adj_list[fences[cur_index][1]->to].num_points = n1 + 1;
    }
    else
      fences[cur_index][1]->to = j;
    for (j = 0; j < n2; j++)
      fscanf(fin, "%d", &cur_vertices[j]);
    cur_vertices[n2] = cur_index;
    qsort(cur_vertices, n2 + 1, sizeof(int), compare);
    for (j = 0; j < num_vertices; j++) {
      for (k = 0; k < n2 + 1 && k < adj_list[j].num_points; k++)
        if (cur_vertices[k] != adj_list[j].points[k])
          break;
      if (n2 + 1 == adj_list[j].num_points && k == n2 + 1)
        break;
    }
    if (j == num_vertices) {
      fences[cur_index][0]->to = num_vertices;
      num_vertices++;
      adj_list[fences[cur_index][0]->to].list = NULL;
      for (j = 0; j <= n2; j++)
        adj_list[fences[cur_index][0]->to].points[j] = 
          cur_vertices[j];
      adj_list[fences[cur_index][0]->to].num_points = n2 + 1;
    }
    else
      fences[cur_index][0]->to = j;
    fences[cur_index][0]->next = 
      adj_list[fences[cur_index][1]->to].list;
    adj_list[fences[cur_index][1]->to].list = fences[cur_index][0];
    fences[cur_index][1]->next = 
      adj_list[fences[cur_index][0]->to].list;
    adj_list[fences[cur_index][0]->to].list = fences[cur_index][1];
  }
  int min_distance = -1, cur_min, cur_parent;
  for (i = 0; i < n; i++) {
    for (j = 0; j < num_vertices; j++) {
      distances[j][0] = -1;
      distances[j][1] = 0;
    }
    fences[i + 1][0]->active = 0;
    fences[i + 1][1]->active = 0;
    cur_parent = fences[i + 1][0]->to;
    distances[cur_parent][0] = 0;
    for (;;) {
      distances[cur_parent][1] = 1;
      cur_fence = adj_list[cur_parent].list;
      while (cur_fence != NULL) {
        if (cur_fence->active == 1 && 
            distances[cur_fence->to][1] == 0 &&
            (distances[cur_fence->to][0] == -1 || 
            distances[cur_parent][0] + cur_fence->length < 
            distances[cur_fence->to][0]))
          distances[cur_fence->to][0] = distances[cur_parent][0] + 
                                        cur_fence->length;
        cur_fence = cur_fence->next;
      }
      cur_min = -1;
      for (j = 0; j < num_vertices; j++)
        if (distances[j][1] == 0 && distances[j][0] > -1 &&
            (cur_min == -1 || distances[j][0] < cur_min)) {
          cur_min = distances[j][0];
          cur_parent = j;
        }
      if (cur_min == -1)
        break;
    }
    fences[i + 1][0]->active = 1;
    fences[i + 1][1]->active = 1;
    if (distances[fences[i + 1][1]->to][0] != -1 && 
        (distances[fences[i + 1][1]->to][0] + 
        fences[i + 1][1]->length < min_distance || 
        min_distance == -1))
      min_distance = distances[fences[i + 1][1]->to][0] + 
                                fences[i + 1][1]->length;
  }
  fprintf(fout, "%d\n", min_distance);
  return 0;
}