/*
ID: jujumoh1
LANG: C
TASK: buylow
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_N 5000
#define max(a, b) (a > b ? a : b)

typedef struct bignum {
  int digits[100];
  int num_digits;
} bignum;

bignum add(bignum a, bignum b) {
  bignum return_num;
  int i, carry = 0;
  for (i = 0; i < 100; i++)
    return_num.digits[i] = 0;
  return_num.num_digits = 0;
  for (i = 0; i < max(a.num_digits, b.num_digits); i++) {
    return_num.digits[i] = a.digits[i] + b.digits[i] + carry;
    carry = (int)(return_num.digits[i] / 10);
    return_num.digits[i] = return_num.digits[i] % 10;
  }
  if (carry != 0) {
    return_num.digits[i] = carry;
    return_num.num_digits = i + 1;
  }
  else
    return_num.num_digits = i;
  return return_num;
}

bignum subtract(bignum a, bignum b) {
  bignum return_num;
  int i, borrow = 0;
  for (i = 0; i < 100; i++)
    return_num.digits[i] = 0;
  return_num.num_digits = 0;
  for (i = 0; i < max(a.num_digits, b.num_digits); i++) {
    return_num.digits[i] = a.digits[i] - b.digits[i] - borrow;
    if (return_num.digits[i] < 0) {
      return_num.digits[i] += 10;
      borrow = 1;
    }
    else
      borrow = 0;
    if (return_num.digits[i] != 0)
      return_num.num_digits = i + 1;
  }
  return return_num;
}

int main(void) {
  FILE *fin = fopen("buylow.in", "r");
  FILE *fout = fopen("buylow.out", "w");
  int n, i, j;
  static int stocks[MAX_N];
  static bignum count[MAX_N];
  static int dp[MAX_N];
  int best = 1;
  fscanf(fin, "%d", &n);
  for (i = 0; i < n; i++) {
    for (j = 0; j < 100; j++)
      count[i].digits[j] = 0;
    count[i].num_digits = 0;
    fscanf(fin, "%d", &stocks[i]);
  }
  count[n - 1].num_digits = 1;
  count[n - 1].digits[0] = 1;
  dp[n - 1] = 1;
  for (i = n - 2; i >= 0; i--) {
    dp[i] = 1;
    for (j = i + 1; j < n; j++)
      if (stocks[j] < stocks[i])
        dp[i] = max(dp[i], dp[j] + 1);
    best = max(best, dp[i]);
    for (j = i + 1; j < n; j++)
      if (dp[j] + 1 == dp[i] && stocks[j] < stocks[i])
        count[i] = add(count[i], count[j]);
    if (count[i].num_digits == 0) {
      count[i].num_digits = 1;
      count[i].digits[0] = 1;
    }
    for (j = i + 1; j < n; j++)
      if (stocks[i] == stocks[j] && dp[j] == dp[i])
        count[i] = subtract(count[i], count[j]);
  }
  bignum num_max;
  num_max.num_digits = 0;
  for (i = 0; i < 100; i++)
    num_max.digits[i] = 0;
  for (i = 0; i < n; i++)
    if (dp[i] == best)
      num_max = add(num_max, count[i]);
  if (num_max.num_digits == 0) {
    num_max.num_digits = 1;
    num_max.digits[0] = 1;
  }
  fprintf(fout, "%d ", best);
  for (i = num_max.num_digits - 1; i >= 0; i--)
    fprintf(fout, "%d", num_max.digits[i]);
  fprintf(fout, "\n");
  return 0;
}