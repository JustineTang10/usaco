/*
ID: jujumoh1
LANG: C
TASK: numtri
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_ROWS 1000

static int triangle[MAX_ROWS][MAX_ROWS][2];
int max_sum = 0, r;

int compare(const void *a, const void *b) {
  return (*(int*)a - *(int*)b);
}

/*void search(int row, int column, int current_sum) {
  if (row == r - 1) {
    if (current_sum + triangle[row][column] > max_sum)
      max_sum = current_sum + triangle[row][column];
    return;
  }
  search(row + 1, column, current_sum + triangle[row][column]);
  search(row + 1, column + 1, current_sum + triangle[row][column]);
}*/

int main(void) {
  FILE *fin = fopen("numtri.in", "r");
  FILE *fout = fopen("numtri.out", "w");
  int i, j, current_index;
  fscanf(fin, "%d", &r);
  for (i = 0; i < r; i++) {
    for (j = 0; j <= i; j++) {
      fscanf(fin, "%d", &triangle[i][j][0]);
      triangle[i][j][1] = triangle[i][j][0];
    }
  }
  for (i = r - 2; i >= 0; i--)
    for (j = 0; j <= i; j++) {
      if (triangle[i + 1][j][1] > triangle[i + 1][j + 1][1])
        triangle[i][j][1] += triangle[i + 1][j][1];
      else
        triangle[i][j][1] += triangle[i + 1][j + 1][1];
    }
  current_index = 0;
  for (i = 0; i < r - 1; i++) {
    max_sum += triangle[i][current_index][0];
    if (triangle[i + 1][current_index + 1][1] > 
        triangle[i + 1][current_index][1] ||
        (triangle[i + 1][current_index + 1][1] == 
        triangle[i + 1][current_index][1] &&
        triangle[i + 1][current_index + 1][0] >= 
        triangle[i + 1][current_index][0]))
      current_index++;
  }
  max_sum += triangle[r - 1][current_index][0];
  //search(0, 0, 0);
  fprintf(fout, "%d\n", max_sum);
  return 0;
}