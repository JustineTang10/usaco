/*
ID: jujumoh1
LANG: C
TASK: transform
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int rotation(char original_square[], char transform_square[], 
              int n) {
  char rotation_square[n * n + 1];
  int i, j, helper = n;
  for (i = 0; i < n; i++) {
    helper--;
    for (j = 0; j < n; j++)
      rotation_square[j * n + helper] = original_square[i * n + j];
  }
  if (strncmp(transform_square, rotation_square, n * n) == 0)
    return 1;
  for (i = 1; i <= n * n; i++)
    rotation_square[n * n - i] = original_square[i - 1];
  if (strncmp(transform_square, rotation_square, n * n) == 0)
    return 2;
  helper = 0;
  for (i = 0; i < n; i++) {
    for (j = n - 1; j >= 0; j--) {
      rotation_square[j * n + i] = original_square[i * n + helper];
      helper++;
    }
    helper = 0;
  }
  if (strncmp(transform_square, rotation_square, n * n) == 0)
    return 3;
  return 0;
}

int main(void) {
  FILE *fin = fopen("transform.in", "r");
  FILE *fout = fopen("transform.out", "w");
  int n, i, j, k, count = 0, rotated_outcome;
  fscanf(fin, "%d\n", &n);
  char original_square[n * n + 1], transform_square[n * n + 1];
  char reflection[n * n + 1], helper_string[n];
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      fscanf(fin, "%c", &original_square[count]);
      count++;
    }
    fscanf(fin, "\n");
  }
  count = 0;
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      fscanf(fin, "%c", &transform_square[count]);
      count++;
    }
    fscanf(fin, "\n");
  }
  rotated_outcome = rotation(original_square, transform_square, n);
  if (rotated_outcome != 0)
    fprintf(fout, "%d\n", rotated_outcome);
  else {
    count = 0;
    for (i = 0; i < n; i++) {
      for (j = n - 1; j >= 0; j--) {
        reflection[i * n + j] = original_square[i * n + count];
        count++;
      }
      count = 0;
    }
    if (strncmp(reflection, transform_square, n * n) == 0)
      fprintf(fout, "4\n");
    else if (rotation(reflection, transform_square, n) != 0)
      fprintf(fout, "5\n");
    else if (strncmp(original_square, transform_square, n * n) == 0)
      fprintf(fout, "6\n");
    else
      fprintf(fout, "7\n");
  }
  return 0;
} 