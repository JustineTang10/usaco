/*
ID: jujumoh1
LANG: C
TASK: lamps
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_N 100

static int combinations[8][MAX_N];
int combination_count = 0;

int min(int val1, int val2) {
  if (val1 > val2)
    return val2;
  return val1;
}

void search(int combination[], int comb_length, int count) {
  int i, j;
  if (count == 0) {
    int is_in_arr;
    for (i = 0; i < combination_count; i++) {
      is_in_arr = 1;
      for (j = 0; j < comb_length; j++)
        if (combinations[i][j] != combination[j])
          is_in_arr = 0;
      if (is_in_arr == 1)
        return;
    }
    for (i = 0; i < comb_length; i++) {
      combinations[combination_count][i] = combination[i];
    }
    combination_count++;
    return;
  }
  int cur_combination[comb_length];
  for (i = 0; i < 4; i++) {
    for (j = 0; j < comb_length; j++) {
      cur_combination[j] = combination[j];
      if ((i == 0) || (i == 1 && j % 2 == 0) || 
          (i == 2 && j % 2 == 1) || (i == 3 && j % 3 == 0))
        cur_combination[j] = 1 - cur_combination[j];
    }
    search(cur_combination, comb_length, count - 1);
  }
}

int main(void) {
  FILE *fin = fopen("lamps.in", "r");
  FILE *fout = fopen("lamps.out", "w");
  int n, c, i, j, k;
  int on_lamp, off_lamp;
  int on_count = 0, off_count = 0;
  fscanf(fin, "%d\n%d\n%d", &n, &c, &on_lamp);
  int on_lamps[n], off_lamps[n];
  while (on_lamp != -1) {
    on_lamps[on_count] = on_lamp - 1;
    on_count++;
    fscanf(fin, "%d", &on_lamp);
  }
  fscanf(fin, "%d", &off_lamp);
  while (off_lamp != -1) {
    off_lamps[off_count] = off_lamp - 1;
    off_count++;
    fscanf(fin, "%d", &off_lamp);
  }
  int combination[n];
  for (i = 0; i < n; i++)
    combination[i] = 1;
  search(combination, n, min(4, c));
  int compare_val, temp[n];
  for (i = 0; i < combination_count; i++)
    for (j = i + 1; j < combination_count; j++) {
      compare_val = 1;
      for (k = 0; k < n; k++) {
        if (combinations[i][k] > combinations[j][k])
          compare_val = -1;
        else if (combinations[i][k] < combinations[j][k])
          break;
      }
      if (compare_val == -1) {
        for (k = 0; k < n; k++) {
          temp[k] = combinations[i][k];
          combinations[i][k] = combinations[j][k];
          combinations[j][k] = temp[k];
        }
      }
    }
  int is_possible, num_possible = 0;
  for (i = 0; i < combination_count; i++) {
    is_possible = 1;
    for (j = 0; j < on_count; j++)
      if (combinations[i][on_lamps[j]] == 0)
        is_possible = 0;
    for (j = 0; j < off_count; j++)
      if (combinations[i][off_lamps[j]] == 1)
        is_possible = 0;
    if (is_possible == 1) {
      for (j = 0; j < n; j++)
        fprintf(fout, "%d", combinations[i][j]);
      fprintf(fout, "\n");
      num_possible++;
    }
  }
  if (num_possible == 0)
    fprintf(fout, "IMPOSSIBLE\n");
  return 0;
}