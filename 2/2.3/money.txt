/*
ID: jujumoh1
LANG: C
TASK: money
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX_N 10000
#define MAX_V 25

long long num_ways = 0;
int v, n;
static long long memo[MAX_V][MAX_N];

int compare(const void *a, const void *b) {
  return (*((int*)b) - *((int*)a));
}

long long search(int current_total, int system[], int index) {
  if (current_total <= 0) {
    if (current_total == 0)
      return 1;
    return 0;
  }
  if (memo[index][current_total - 1] != -1)
    return memo[index][current_total - 1];
  int i;
  long long total = 0;
  for (i = index; i < v; i++)
    total += search(current_total - system[i], system, i);
  memo[index][current_total - 1] = total;
  return total;
}

int main(void) {
  FILE *fin = fopen("money.in", "r");
  FILE *fout = fopen("money.out", "w");
  //static long long dp[MAX_N + 1] = {0};
  fscanf(fin, "%d%d", &v, &n);
  int i, j, system[v];
  for (i = 0; i < v; i++) {
    fscanf(fin, "%d", &system[i]);
    //dp[system[i]] = 1;
  }
  qsort(system, v, sizeof(int), compare);
  /*for (i = 1; i <= n; i++) {
    for (j = 1; j <= i / 2; j++)
      dp[i] += dp[j] * dp[i - j];
    printf("%f\n", ceil((double) dp[i] / 2));
  }*/
  //printf("%lld\n", dp[n]);
  for (i = 0; i < v; i++)
    for (j = 0; j < n; j++)
      memo[i][j] = -1;
  fprintf(fout, "%lld\n", search(n, system, 0));
  return 0;
}