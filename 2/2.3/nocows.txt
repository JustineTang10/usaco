/*
ID: jujumoh1
LANG: C
TASK: nocows
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX_N 199
#define MAX_K 100

static int memo[MAX_N][MAX_K], count = 0;

int max(int val1, int val2) {
  if (val1 > val2)
    return val1;
  return val2;
}

int search(int num_nodes, int height) {
  if (memo[num_nodes - 1][height - 1] != -1) {
    return memo[num_nodes - 1][height - 1];
  }
  if (num_nodes == 1 || height == 1) {
    if (num_nodes == 1) {
      memo[num_nodes - 1][height - 1] = 1;
      return 1;
    }
    memo[num_nodes - 1][height - 1] = 0;
    return 0;
  }
  int i, left, right;
  memo[num_nodes - 1][height - 1] = 0;
  for (i = 1; i < num_nodes - 1; i += 2) {
    left = search(i, height - 1);
    right = search(num_nodes - i - 1, height - 1);
    memo[num_nodes - 1][height - 1] = (memo[num_nodes - 1]
                                            [height - 1] + 
                                      left * right) % 9901;
  }
  return memo[num_nodes - 1][height - 1];
}

int main(void) {
  FILE *fin = fopen("nocows.in", "r");
  FILE *fout = fopen("nocows.out", "w");
  int n, k;
  fscanf(fin, "%d%d", &n, &k);
  if (n % 2 == 0) {
    fprintf(fout, "0\n");
    return 0;
  }
  int i, j;
  for (i = 0; i < n; i++)
    for (j = 0; j < k; j++)
      memo[i][j] = -1;
  fprintf(fout, "%d\n", (9901 + search(n, k) - search(n, k - 1)) 
                        % 9901);
  //search(63, 8);
  return 0;
}