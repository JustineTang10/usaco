/*
ID: jujumoh1
LANG: C
TASK: cowtour
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX_PASTURES 150
#define MAX_GRID 100000

typedef struct pasture {
  int visited;
  int x, y;
  int next;
  double farthest;
  int group;
} pasture;

typedef struct field {
  int index;
  double diameter;
} field;

static int matrix[MAX_PASTURES][MAX_PASTURES];
pasture pastures[MAX_PASTURES];
field fields[MAX_PASTURES]; 
int num_fields = 0, n;
double min_diameter = INFINITY;

double max(double val1, double val2) {
  if (val1 > val2)
    return val1;
  return val2;
}

int main(void) {
  FILE *fin = fopen("cowtour.in", "r");
  FILE *fout = fopen("cowtour.out", "w");
  fscanf(fin, "%d", &n);
  register int i, j, k;
  char current_char;
  for (i = 0; i < n; i++) {
    fscanf(fin, "%d%d\n", &pastures[i].x, &pastures[i].y);
    pastures[i].next = -1;
    pastures[i].farthest = 0;
    pastures[i].visited = 0;
  }
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      fscanf(fin, "%c", &current_char);
      matrix[i][j] = atoi((char[2]){current_char, 0});
    }
    fscanf(fin, "\n");
  }
  int cur_index = 0, previous = 0;
  int queue[n], new_queue[n], queue_len = 1, new_queue_len;
  queue[0] = 0;
  pastures[0].visited = 1;
  while (cur_index < n) {
    new_queue_len = 0;
    for (i = 0; i < queue_len; i++) {
      if (previous != queue[i])
        pastures[previous].next = queue[i];
      previous = queue[i];
      pastures[queue[i]].group = cur_index;
      for (j = 0; j < n; j++) {
        if (matrix[queue[i]][j] == 1 && pastures[j].visited == 0) {
          pastures[j].visited = 1;
          new_queue[new_queue_len] = j;
          new_queue_len++;
        }
      }
    }
    for (i = 0; i < new_queue_len; i++)
      queue[i] = new_queue[i];
    queue_len = new_queue_len;
    if (queue_len == 0) {
      fields[num_fields].index = cur_index;
      fields[num_fields].diameter = 0;
      num_fields++;
      while (cur_index < n && pastures[cur_index].visited == 1)
        cur_index++;
      if (cur_index == n)
        continue;
      previous = cur_index;
      queue[0] = cur_index;
      pastures[cur_index].visited = 1;
      queue_len = 1;
    }
  }
  static double distances[MAX_PASTURES][MAX_PASTURES];
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      if (matrix[i][j] == 1)
        distances[i][j] = sqrt(pow(pastures[i].x - pastures[j].x, 2) 
                            + pow(pastures[i].y - pastures[j].y, 2));
      else
        distances[i][j] = INFINITY;
    }
  }
  for (k = 0; k < n; k++)
    for (i = 0; i < n; i++) {
      for (j = i + 1; j < n; j++) {
        if (i == k || k == j)
          continue;
        if (distances[i][k] + distances[k][j] < distances[i][j]) {
          distances[i][j] = distances[i][k] + distances[k][j];
          distances[j][i] = distances[i][j];
        }
      }
    }
  //printf("e\n");
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      if (distances[i][j] != INFINITY && 
          distances[i][j] > pastures[i].farthest)
        pastures[i].farthest = distances[i][j];
    }
    if (pastures[i].farthest > fields[pastures[i].group].diameter)
      fields[pastures[i].group].diameter = pastures[i].farthest;
  }
  int pasture1, pasture2;
  double diameter;
  for (i = 0; i < num_fields; i++) {
    for (j = i + 1; j < num_fields; j++) {
      pasture1 = fields[i].index;
      while (pasture1 != -1) {
        pasture2 = fields[j].index;
        while (pasture2 != -1) {
          diameter = max(pastures[pasture1].farthest +
              sqrt(pow(pastures[pasture1].x - pastures[pasture2].x, 2) + 
                  pow(pastures[pasture1].y - pastures[pasture2].y, 2)) +
              pastures[pasture2].farthest, 
              max(fields[pastures[pasture1].group].diameter, 
                  fields[pastures[pasture2].group].diameter));
          if (diameter < min_diameter) {
            min_diameter = diameter;
          }
          pasture2 = pastures[pasture2].next;
        }
        pasture1 = pastures[pasture1].next;
      }
    }
  }
  fprintf(fout, "%lf\n", min_diameter);
  return 0;
}