/*
ID: jujumoh1
LANG: C
TASK: maze1
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_W 38
#define MAX_H 100

typedef struct square {
  int directions[4];
} square;

static square maze[MAX_H][MAX_W];
static int distances[MAX_H][MAX_W] = {0};
int max_distance = 0, w, h;

void find_farthest(int y, int x) {
  int count = 0, i, j;
  int min_moves[h][w];
  for (i = 0; i < h; i++)
    for (j = 0; j < w; j++)
      min_moves[i][j] = 0;
  int queue[h * w][2], new_queue[h * w][2], queue_len, new_queue_len;
  queue[0][0] = y;
  queue[0][1] = x;
  queue_len = 1;
  for (;;) {
    count++;
    new_queue_len = 0;
    for (i = 0; i < queue_len; i++) {
      for (j = 0; j < 4; j++) {
        if (maze[queue[i][0]][queue[i][1]].directions[j] == 2) {
          if (max_distance < count)
            max_distance = count;
          return;
        }
        else if (maze[queue[i][0]][queue[i][1]].directions[j] == 1) {
          if (j == 0) {
            if (min_moves[queue[i][0] - 1][queue[i][1]])
              continue;
            new_queue[new_queue_len][0] = queue[i][0] - 1;
            new_queue[new_queue_len][1] = queue[i][1];
          }
          else if (j == 1) {
            if (min_moves[queue[i][0]][queue[i][1] + 1])
              continue;
            new_queue[new_queue_len][0] = queue[i][0];
            new_queue[new_queue_len][1] = queue[i][1] + 1;
          }
          else if (j == 2) {
            if (min_moves[queue[i][0] + 1][queue[i][1]])
              continue;
            new_queue[new_queue_len][0] = queue[i][0] + 1;
            new_queue[new_queue_len][1] = queue[i][1];
          }
          else {
            if (min_moves[queue[i][0]][queue[i][1] - 1])
              continue;
            new_queue[new_queue_len][0] = queue[i][0];
            new_queue[new_queue_len][1] = queue[i][1] - 1;
          }
          min_moves[new_queue[new_queue_len][0]]
                    [new_queue[new_queue_len][1]] = count;
          new_queue_len++;
        }
      }
    }
    for (i = 0; i < new_queue_len; i++) {
      queue[i][0] = new_queue[i][0];
      queue[i][1] = new_queue[i][1];
    }
    queue_len = new_queue_len;
  }
}

int main(void) {
  FILE *fin = fopen("maze1.in", "r");
  FILE *fout = fopen("maze1.out", "w");
  fscanf(fin, "%d%d\n", &w, &h);
  int i, j;
  char current_char;
  for (i = 0; i < 2 * h + 1; i++) {
    for (j = 0; j < 2 * w + 1; j++) {
      if (i % 2 == 0 && j % 2 == 0)
        fscanf(fin, "+");
      else if (i % 2 == 0) {
        fscanf(fin, "%c", &current_char);
        if (current_char == ' ') {
          if (i > 0)
            maze[i / 2 - 1][(j - 1) / 2].directions[2] = 1;
          if (i < 2 * h)
            maze[i / 2][(j - 1) / 2].directions[0] = 1;
          if (i == 0)
            maze[i / 2][(j - 1) / 2].directions[0] = 2;
          if (i == 2 * h)
            maze[i / 2 - 1][(j - 1) / 2].directions[2] = 2;
        }
      }
      else if (j % 2 == 0) {
        fscanf(fin, "%c", &current_char);
        if (current_char == ' ') {
          if (j > 0)
            maze[(i - 1) / 2][j / 2 - 1].directions[1] = 1;
          if (j < 2 * w)
            maze[(i - 1) / 2][j / 2].directions[3] = 1;
          if (j == 0)
            maze[(i - 1) / 2][j / 2].directions[3] = 2;
          if (j == 2 * w)
            maze[(i - 1) / 2][j / 2 - 1].directions[1] = 2;
        }
      }
      else
        fscanf(fin, "%c", &current_char);
    }
    fscanf(fin, "%c", &current_char);
  }
  for (i = 0; i < h; i++)
    for (j = 0; j < w; j++)
      find_farthest(i, j);
  fprintf(fout, "%d\n", max_distance);
  return 0;
}